 GNU assembler version 2.24.51 (i686-linux-gnu)
	 using BFD version (GNU Binutils for Ubuntu) 2.24.90.20141014.
 options passed	: --32 -I../inc -almgns=welcome.lst -c 
 input file    	: welcome.s
 output file   	: welcome.o
 target        	: i686-pc-linux-gnu
 time stamp    	: 2015-06-09T09:03:44.000+0200

   1              	//-----------------------------------------------------------------
   2              	//      welcome.s
   3              	//
   4              	//      This boot-sector replacement program uses some ROM-BIOS 
   5              	//      services to write a text-string to the console display.
   6              	//
   7              	//       to assemble:  $ as welcome.s -o welcome.o
   8              	//       and to link:  $ ld welcome.o -T ldscript -o welcome.b
   9              	//       and install:  $ dd if=welcome.b of=/dev/sda4
  10              	//
  11              	//      NOTE: This code begins executing with CS:IP = 0000:7C00
  12              	//
  13              	//      programmer: ALLAN CRUSE
  14              	//      written on: 28 AUG 2008
  15              	//-----------------------------------------------------------------
  16              	
  17              	        .section        .text
  18              	#------------------------------------------------------------------
  19              	        .code16                         # for real-mode execution
  20 0000 EA0000C0 	        ljmp    $0x07C0, $main          # to address our symbols
  20      07
  21              	#------------------------------------------------------------------
  22 0005 0D0A2057 	msg:    .ascii  "\r\n Welcome to Computer Science 630 \r\n"
  22      656C636F 
  22      6D652074 
  22      6F20436F 
  22      6D707574 
  23 002a 0A204164 	        .ascii  "\n Advanced Microcomputer Programming \r\n"
  23      76616E63 
  23      6564204D 
  23      6963726F 
  23      636F6D70 
  24 0051 4C00     	len:    .short  . - msg                 # length of message string
  25 0053 0A       	att:    .byte   0x0A                    # bright green upon black
  26              	#------------------------------------------------------------------
  27              	        .globl  main
  28              	main:   # setup stack area (so we can call ROM-BIOS functions)
  29 0054 31C0     	        xor     %ax, %ax                # address bottom of memory
  30 0056 8ED0     	        mov     %ax, %ss                #   with the SS register
  31 0058 BC007C   	        mov     $0x7C00, %sp            # set the stacktop address
  32              	
  33              	        # setup segment-registers (so we can use symbol addresses)
  34 005b 8CC8     	        mov     %cs, %ax                # address our program data
  35 005d 8ED8     	        mov     %ax, %ds                #   with the DS register
  36 005f 8EC0     	        mov     %ax, %es                #   also the ES register
  37              	
  38              	        # invoke the ROM-BIOS 'write_string' function
  39 0061 B413     	        mov     $0x13, %ah              # function-selector in AH
  40 0063 B700     	        mov     $0, %bh                 # vram page-number in BH
  41 0065 B60A     	        mov     $10, %dh                # row-number goes in DH
  42 0067 B200     	        mov     $0, %dl                 # column-number into DL
  43 0069 BD0500   	        mov     $msg, %bp               # point ES:BP to message
  44 006c 8B0E5100 	        mov     len, %cx                # message-length into CX
  45 0070 8A1E5300 	        mov     att, %bl                # color attributes in BL
  46 0074 B001     	        mov     $1, %al                 # move cursor forward
  47 0076 CD10     	        int     $0x10                   # invoke BIOS service
  48              	
  49              	        # wait for the user to press a key
  50 0078 B400     	        mov     $0x00, %ah              # function-selector in AH
  51 007a CD16     	        int     $0x16                   # invoke BIOS service
  52              	
  53              	        # reboot the computer
  54 007c CD19     	        int     $0x19
  55              	#------------------------------------------------------------------
  56 007e 00000000 	        .org    510                     # boot-signature's offset
  56      00000000 
  56      00000000 
  56      00000000 
  56      00000000 
  57 01fe 55AA     	        .byte   0x55, 0xAA              # value of boot-signature
  58              	#------------------------------------------------------------------
  59              	        .end                            # nothing more to assemble
DEFINED SYMBOLS
           welcome.s:28     .text:0000000000000054 main
           welcome.s:22     .text:0000000000000005 msg
           welcome.s:24     .text:0000000000000051 len
           welcome.s:25     .text:0000000000000053 att

NO UNDEFINED SYMBOLS
