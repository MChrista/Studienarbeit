 GNU assembler version 2.24.51 (i686-linux-gnu)
	 using BFD version (GNU Binutils for Ubuntu) 2.24.90.20141014.
 options passed	: --32 -I../inc -g -almgns=obj/gpf.lst -c 
 input file    	: src/gpf.s
 output file   	: obj/gpf.o
 target        	: i686-pc-linux-gnu
 time stamp    	: 2015-05-27T04:55:14.000-0700

   1              	
   2              	#==================================================================
   3              	#=========  TRAP-HANDLER FOR GENERAL PROTECTION FAULTS  ===========
   4              	#==================================================================
   5              	#
   6              	#-----------------------------------------------------------------
   7              	# Stack Frame Layout
   8              	#-----------------------------------------------------------------
   9              	#
  10              	#                 Byte 0
  11              	#                      V
  12              	#    +-----------------+
  13              	#    |     EFLAGS      |  +64
  14              	#    +-----------------+
  15              	#    |       CS        |  +60
  16              	#    +-----------------+
  17              	#    |       EIP       |  +56
  18              	#    +-----------------+
  19              	#    |    Error Code   |  +52
  20              	#    +-----------------+
  21              	#    |      INT ID     |  +48
  22              	#    +-----------------+
  23              	#    |   General Regs  |
  24              	#    | EAX ECX EDX EBX |  +32
  25              	#    | ESP EBP ESI EDI |  +16
  26              	#    +-----------------+
  27              	#    |  Segment  Regs  |
  28              	#    |   DS ES FS GS   |  <-- ebp
  29              	#    +=================+
  30              	#
  31              	#-----------------------------------------------------------------
  32              	        .section    .text
  33              	        .type       isrGPF, @function
  34              	        .globl      isrGPF
  35              	        .extern     bail_out
  36              	        .code32
  37              	        .align   16
  38              	#------------------------------------------------------------------
  39              	isrGPF:
  40              	        #----------------------------------------------------------
  41              	        # push interrupt id onto stack for register/stack dump
  42              	        # 13: General Protection Fault Exception (With Error Code!)
  43              	        #----------------------------------------------------------
  44 0000 6A0D     	        pushl   $13
  45              	
  46              	        #-----------------------------------------------------------
  47              	        # push general-purpose and all data segment registers onto
  48              	        # stack in order to preserve their value and also for display
  49              	        #-----------------------------------------------------------
  50 0002 60       	        pushal
  51 0003 1E       	        pushl   %ds
  52 0004 06       	        pushl   %es
  53 0005 0FA0     	        pushl   %fs
  54 0007 0FA8     	        pushl   %gs
  55 0009 89E5     	        mov     %esp, %ebp              # store current stack pointer
  56              	
  57              	        #----------------------------------------------------------
  58              	        # setup segment registers
  59              	        #----------------------------------------------------------
  60 000b 66B80000 	        mov     $privDS, %ax
  61 000f 8ED8     	        mov     %ax, %ds
  62              	
  63              	        #-----------------------------------------------------------
  64              	        # pick the stack segment descriptor-table
  65              	        #-----------------------------------------------------------
  66 0011 8D1D0000 	        lea     theGDT, %ebx            # EBX = offset for GDT
  66      0000
  67 0017 8CD1     	        mov     %ss, %ecx               # copy selector to ECX
  68 0019 81E1F8FF 	        and     $0xFFF8, %ecx           # isolate selector-index
  68      0000
  69              	
  70              	        #-----------------------------------------------------------
  71              	        # extract the stack segment descriptor's limit in order to
  72              	        # determine how many bytes starting at SS:ESP we can read
  73              	        # without violating the limit
  74              	        #-----------------------------------------------------------
  75 001f 8B440B04 	        mov     4(%ebx, %ecx), %eax
  76 0023 2500000F 	        and     $0x000f0000, %eax
  76      00
  77 0028 668B040B 	        mov     0(%ebx, %ecx), %ax
  78              	
  79              	        #----------------------------------------------------------
  80              	        # print register values
  81              	        #----------------------------------------------------------
  82 002c 6800C000 	        pushl   $1<<14+1<<15            # highlight CS:EIP registers
  82      00
  83 0031 6A32     	        pushl   $50
  84 0033 6870709E 	        pushl   $0x9e7070
  84      00
  85 0038 68FEFFFF 	        pushl   $INT_NUM-2
  85      FF
  86 003d 6A00     	        pushl   $0
  87 003f 68000000 	        pushl   $intname
  87      00
  88 0044 55       	        pushl   %ebp
  89 0045 E8FCFFFF 	        call    print_stacktrace
  89      FF
  90 004a 83C41C   	        add     $7*4, %esp
  91              	
  92 004d 6A00     	        pushl   $0
  93 004f 6A23     	        pushl   $35
  94 0051 6870709E 	        pushl   $0x9e7070
  94      00
  95 0056 68000000 	        pushl   $STK_NUM
  95      00
  96 005b 6A00     	        pushl   $0
  97 005d 68000000 	        pushl   $stkname
  97      00
  98 0062 8B451C   	        mov     28(%ebp), %eax
  99 0065 83C014   	        add     $20, %eax
 100 0068 50       	        pushl   %eax
 101 0069 E8FCFFFF 	        call    print_stacktrace
 101      FF
 102 006e 83C41C   	        add     $7*4, %esp
 103              	
 104              	        #----------------------------------------------------------
 105              	        # restore the values to the registers we've modified here
 106              	        #----------------------------------------------------------
 107 0071 0FA9     	        popl    %gs
 108 0073 0FA1     	        popl    %fs
 109 0075 07       	        popl    %es
 110 0076 1F       	        popl    %ds
 111 0077 61       	        popal
 112              	
 113              	        #----------------------------------------------------------
 114              	        # remove interrupt id from stack
 115              	        #----------------------------------------------------------
 116 0078 83C404   	        add     $4, %esp
 117              	
 118 007b E9FCFFFF 	        jmp     bail_out
 118      FF
 119              	
DEFINED SYMBOLS
           src/gpf.s:39     .text:0000000000000000 isrGPF

UNDEFINED SYMBOLS
privDS
theGDT
INT_NUM
intname
print_stacktrace
STK_NUM
stkname
bail_out
