head	1.2;
access;
symbols;
locks
	ralf:1.2; strict;
comment	@# @;


1.2
date	2014.10.03.18.03.48;	author ralf;	state Exp;
branches;
next	1.1;

1.1
date	2008.08.28.15.53.52;	author ralf;	state Exp;
branches;
next	;


desc
@Example Boot-Sector program that uses some ROM-BIOS services
to write a text-string to the console display.
Original version by Prof. Allan Cruse, University of San Francisco,
Course CS 630, Fall 2008.
@


1.2
log
@Made main a global symbol in order to avoid linker error
@
text
@//-----------------------------------------------------------------
//      welcome.s
//
//      This boot-sector replacement program uses some ROM-BIOS 
//      services to write a text-string to the console display.
//
//       to assemble:  $ as welcome.s -o welcome.o
//       and to link:  $ ld welcome.o -T ldscript -o welcome.b
//       and install:  $ dd if=welcome.b of=/dev/sda4
//
//      NOTE: This code begins executing with CS:IP = 0000:7C00
//
//      programmer: ALLAN CRUSE
//      written on: 28 AUG 2008
//-----------------------------------------------------------------

        .section        .text
#------------------------------------------------------------------
        .code16                         # for real-mode execution
        ljmp    $0x07C0, $main          # to address our symbols
#------------------------------------------------------------------
msg:    .ascii  "\r\n Welcome to Computer Science 630 \r\n"
        .ascii  "\n Advanced Microcomputer Programming \r\n"
len:    .short  . - msg                 # length of message string
att:    .byte   0x0A                    # bright green upon black
#------------------------------------------------------------------
        .globl  main
main:   # setup stack area (so we can call ROM-BIOS functions)
        xor     %ax, %ax                # address bottom of memory
        mov     %ax, %ss                #   with the SS register
        mov     $0x7C00, %sp            # set the stacktop address

        # setup segment-registers (so we can use symbol addresses)
        mov     %cs, %ax                # address our program data
        mov     %ax, %ds                #   with the DS register
        mov     %ax, %es                #   also the ES register

        # invoke the ROM-BIOS 'write_string' function
        mov     $0x13, %ah              # function-selector in AH
        mov     $0, %bh                 # vram page-number in BH
        mov     $10, %dh                # row-number goes in DH
        mov     $0, %dl                 # column-number into DL
        mov     $msg, %bp               # point ES:BP to message
        mov     len, %cx                # message-length into CX
        mov     att, %bl                # color attributes in BL
        mov     $1, %al                 # move cursor forward
        int     $0x10                   # invoke BIOS service

        # wait for the user to press a key
        mov     $0x00, %ah              # function-selector in AH
        int     $0x16                   # invoke BIOS service

        # reboot the computer
        int     $0x19
#------------------------------------------------------------------
        .org    510                     # boot-signature's offset
        .byte   0x55, 0xAA              # value of boot-signature
#------------------------------------------------------------------
        .end                            # nothing more to assemble

@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
//	welcome.s
d4 2
a5 2
//	This boot-sector replacement program uses some ROM-BIOS 
//	services to write a text-string to the console display.
d7 3
a9 3
//	 to assemble:  $ as welcome.s -o welcome.o
//	 and to link:  $ ld welcome.o -T ldscript -o welcome.b
//	 and install:  $ dd if=welcome.b of=/dev/sda4
d11 1
a11 1
//	NOTE: This code begins executing with CS:IP = 0000:7C00
d13 2
a14 2
//	programmer: ALLAN CRUSE
//	written on: 28 AUG 2008
d17 1
a17 1
	.section	.text
d19 2
a20 2
	.code16				# for real-mode execution
	ljmp	$0x07C0, $main		# to address our symbols
d22 4
a25 4
msg:	.ascii	"\r\n Welcome to Computer Science 630 \r\n"
	.ascii	"\n Advanced Microcomputer Programming \r\n"
len:	.short	. - msg			# length of message string
att:	.byte	0x0A			# bright green upon black
d27 5
a31 9
main:	# setup stack area (so we can call ROM-BIOS functions)
	xor	%ax, %ax		# address bottom of memory
	mov	%ax, %ss		#   with the SS register
	mov	$0x7C00, %sp		# set the stacktop address 
	
	# setup segment-registers (so we can use symbol addresses)
	mov	%cs, %ax		# address our program data 
	mov	%ax, %ds		#   with the DS register
	mov	%ax, %es		#   also the ES register
d33 4
a36 14
	# invoke the ROM-BIOS 'write_string' function
	mov	$0x13, %ah		# function-selector in AH
	mov	$0, %bh			# vram page-number in BH
	mov	$10, %dh		# row-number goes in DH
	mov	$0, %dl			# column-number into DL
	mov	$msg, %bp		# point ES:BP to message
	mov	len, %cx		# message-length into CX
	mov	att, %bl		# color attributes in BL
	mov	$1, %al			# move cursor forward 
	int	$0x10			# invoke BIOS service	
	
	# wait for the user to press a key
	mov	$0x00, %ah		# function-selector in AH
	int	$0x16			# invoke BIOS service
d38 17
a54 2
	# reboot the computer 
	int	$0x19
d56 2
a57 2
	.org	510			# boot-signature's offset
	.byte	0x55, 0xAA		# value of boot-signature
d59 1
a59 1
	.end				# nothing more to assemble
@
