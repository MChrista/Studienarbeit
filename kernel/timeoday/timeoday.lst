 GNU assembler version 2.24 (x86_64-linux-gnu)
	 using BFD version (GNU Binutils for Ubuntu) 2.24.
 options passed	: --32 -I../inc -almgns=timeoday.lst -c 
 input file    	: timeoday.s
 output file   	: timeoday.o
 target        	: x86_64-pc-linux-gnu
 time stamp    	: 2014-10-13T16:37:45.000+0200

   1              	//-----------------------------------------------------------------
   2              	//      timeoday.s
   3              	//
   4              	//      The emphasis in this example is on making very clear what
   5              	//      arithmetical steps are needed in order to convert 'ticks'
   6              	//      (i.e., the number of timer-interrupts that occurred since 
   7              	//      midnight) into the current time-of-day, written using the
   8              	//      'HH:MM:SS' format on the customary twelve-hour clock, and 
   9              	//      to show how steps that require multiplications, divisions
  10              	//      and rounding to the nearest integer, can be done with the
  11              	//      x86 instruction-set in an especially efficient manner.
  12              	//
  13              	//       to assemble:  $ as timeoday.s -o timeoday.o 
  14              	//       and to link:  $ ld timeoday.o -T ldscript -o timeoday.b
  15              	//       and install:  $ dd if=timeoday.b of=/dev/sda4 seek=1
  16              	//
  17              	//      NOTE: This code begins executing with CS:IP = 1000:0002.
  18              	//
  19              	//      programmer: ALLAN CRUSE
  20              	//      written on: 20 OCT 2008
  21              	//-----------------------------------------------------------------
  22              	
  23              	        # manifest constants
  24              	
  25              	        .equ    PULSES_PER_SEC, 1193182 # timer input-frequency
  26              	        .equ    PULSES_PER_TICK, 65536  # BIOS frequency-divisor
  27              	
  28              	        .equ    SECS_PER_MIN, 60        # number of seconds/minute
  29              	        .equ    MINS_PER_HOUR, 60       # number of minutes/hour
  30              	        .equ    HOURS_PER_HDAY, 12      # number of hours/half-day
  31              	        .equ    HDAYS_PER_DAY, 2        # number of half-days/day
  32              	
  33              	        .section        .text
  34              	#------------------------------------------------------------------
  35 0000 CDAB     	        .word   0xABCD                  # loader expects signature
  36              	#------------------------------------------------------------------
  37              	        .globl  main
  38              	main:   .code16                         # execution in 'real mode'
  39 0002 2E89262B 	        mov     %sp, %cs:ipltos+0 
  39      00
  40 0007 2E8C162D 	        mov     %ss, %cs:ipltos+2
  40      00
  41              	
  42 000c 8CC8     	        mov     %cs, %ax
  43 000e 8ED8     	        mov     %ax, %ds
  44 0010 8EC0     	        mov     %ax, %es
  45 0012 8ED0     	        mov     %ax, %ss
  46 0014 8D265003 	        lea     tos, %sp
  47              	
  48 0018 E88000   	        call    compute_total_seconds
  49 001b E8B000   	        call    calculate_time_params   
  50 001e E8F600   	        call    format_report_of_time
  51 0021 E81F00   	        call    print_the_time_of_day
  52              	
  53 0024 2E0FB226 	        lss     %cs:ipltos, %sp
  53      2B00
  54 002a CB       	        lret
  55              	#------------------------------------------------------------------
  56 002b 00000000 	ipltos: .word   0, 0                    # holds loader's SS and SP
  57              	#------------------------------------------------------------------
  58              	#------------------------------------------------------------------
  59 002f 0D0A2068 	report: .ascii  "\r\n hh:mm:ss:xm \r\n"         # message-string
  59      683A6D6D 
  59      3A73733A 
  59      786D200D 
  59      0A
  60 0040 1100     	length: .word   . - report                      # message-length
  61 0042 2F       	colors: .byte   0x2F                            # white-on-green
  62              	#------------------------------------------------------------------
  63              	print_the_time_of_day:
  64              	#
  65              	# This procedure is responsible for sending the report-string to
  66              	# the video display screen (it uses ROM-BIOS INT-0x10 routines).
  67              	#
  68 0043 B40F     	        mov     $0x0F, %ah              # current page into BH
  69 0045 CD10     	        int     $0x10                   # request BIOS service
  70              	
  71 0047 B403     	        mov     $0x03, %ah              # cursor row,col in DX
  72 0049 CD10     	        int     $0x10                   # request BIOS service
  73              	
  74 004b 8D2E2F00 	        lea     report, %bp             # point ES:BP to string
  75 004f 8B0E4000 	        mov     length, %cx             # string length into CX
  76 0053 8A1E4200 	        mov     colors, %bl             # text coloring into BL
  77 0057 B80113   	        mov     $0x1301, %ax            # write_string function
  78 005a CD10     	        int     $0x10                   # request BIOS service
  79 005c C3       	        ret
  80              	#------------------------------------------------------------------
  81              	int2str:  
  82              	#
  83              	# This procedure converts an integer from 0 to 99 found in the EAX
  84              	# register into a two-character string of decimal numerals located 
  85              	# at DS:DI.  It preserves the values found in the cpu's registers.
  86              	#
  87 005d 6683F864 	        cmp     $100, %eax              # integer outside bounds?
  88 0061 7319     	        jae     inval                   # yes, no further actions
  89              	
  90 0063 6660     	        pushal                          # else preserve registers
  91              	
  92 0065 B90200   	        mov     $2, %cx                 # setup count of digits
  93 0068 01CF     	        add     %cx, %di                # and point past field
  94              	nxdiv:  
  95 006a 6631D2   	        xor     %edx, %edx              # prepare EDX for divide
  96 006d 66F7367F 	        divl    ten                     # divide by number base 
  96      00
  97 0072 80C230   	        add     $'0', %dl               # turn remainder to digit
  98 0075 4F       	        dec     %di                     # back up pointer to dest'n
  99 0076 8815     	        mov     %dl, (%di)              # store the digit character
 100 0078 E2F0     	        loop    nxdiv                   # again  for another digit
 101              	
 102 007a 6661     	        popal                           # restore saved registers
 103 007c C3       	inval:  ret                             # return control to caller
 104              	#------------------------------------------------------------------
 105 007d 6170     	a_or_p:         .ascii  "ap"    # character for 'am' or 'pm' field
 106 007f 0A000000 	ten:            .int    10      # the decimal number-system's base
 107 0083 00000000 	total_ticks:    .int    0       # number of 'ticks' since midnight
 108 0087 00000000 	total_seconds:  .int    0       # number of seconds since midnight
 109 008b 00000000 	hh:             .int    0       # for the number of the hour today
 110 008f 00000000 	mm:             .int    0       # for the number of the minute now
 111 0093 00000000 	ss:             .int    0       # for the number of the second now
 112 0097 00000000 	xm:             .int    0       # for 'morning-or-afternoon' flag  
 113              	#------------------------------------------------------------------
 114              	#------------------------------------------------------------------
 115              	#       ticks-per-second = 1193182 / 65536 (approximately 18.2) 
 116              	#------------------------------------------------------------------
 117              	compute_total_seconds: 
 118              	#
 119              	# This procedure computes the total number of seconds that have
 120              	# elapsed today (i.e., since midnight), based on the tick_count
 121              	# which is stored (at offset 0x006C) in the ROM-RIOS DATA AREA.
 122              	#
 123              	        # fetch the number of timer-ticks from ROM-BIOS DATA-AREA 
 124 009b 31C0     	        xor     %ax, %ax                # address bottom memory
 125 009d 8EE0     	        mov     %ax, %fs                #   using FS register
 126 009f 6466A16C 	        mov     %fs:0x046C, %eax        # get current tick-count 
 126      04
 127 00a4 66A38300 	        mov     %eax, total_ticks       # store as 'total_ticks'
 128              	
 129              	        # calculate total seconds (= total_ticks * 65536 / 1193182)
 130 00a8 66A18300 	        mov     total_ticks, %eax       # setup the multiplicand
 131 00ac 66B90000 	        mov     $PULSES_PER_TICK, %ecx  # setup the multiplier
 131      0100
 132 00b2 66F7E1   	        mul     %ecx                    # product is in (EDX,EAX)
 133 00b5 66B9DE34 	        mov     $PULSES_PER_SEC, %ecx   # setup the divisor
 133      1200
 134 00bb 66F7F1   	        div     %ecx                    # quotient is left in EAX
 135              	
 136              	        #--------------------------------------------------------
 137              	        # ok, now we 'round' the quotient to the nearest integer
 138              	        #--------------------------------------------------------
 139              	
 140              	        # rounding-rule: 
 141              	        #       if  ( remainder >= (1/2)*divisor )
 142              	        #          then increment the quotient
 143              	        
 144 00be 6601D2   	        add     %edx, %edx      # EDX = twice the remainder
 145 00c1 6629CA   	        sub     %ecx, %edx      # CF=1 if 2*rem < divisor 
 146 00c4 F5       	        cmc                     # CF=1 if 2*rem >= divisor
 147 00c5 6683D000 	        adc     $0, %eax        # ++EAX if 2+rem >= divisor
 148              	
 149              	        # save this rounded quotient as 'total_seconds'
 150 00c9 66A38700 	        mov     %eax, total_seconds     # seconds-since-midnight
 151              	
 152 00cd C3       	        ret
 153              	#------------------------------------------------------------------
 154              	calculate_time_params:
 155              	#
 156              	# Here we compute the time-display parameters from 'total_seconds'
 157              	# 
 158              	#       ss = total_seconds % 60;
 159              	#       mm = (total_seconds / 60) % 60;
 160              	#       hh = ((total_seconds / 60) / 60 ) % 12; 
 161              	#       xm = (((total_seconds / 60) / 60 ) / 12) % 2;
 162              	#
 163 00ce 66A18700 	        mov     total_seconds, %eax     # setup initial dividend
 164              	
 165              	        # calculate  ss = total_seconds % 60
 166 00d2 66B93C00 	        mov     $SECS_PER_MIN, %ecx     # setup the divisor
 166      0000
 167 00d8 6631D2   	        xor     %edx, %edx              # extend the dividend 
 168 00db 66F7F1   	        div     %ecx                    # perform the division
 169 00de 66891693 	        mov     %edx, ss                # save remainder as ss
 169      00
 170              	        
 171              	        # calculate  mm = (total_seconds / 60) % 60
 172 00e3 66B93C00 	        mov     $MINS_PER_HOUR, %ecx    # setup the divisor
 172      0000
 173 00e9 6631D2   	        xor     %edx, %edx              # extend the dividend
 174 00ec 66F7F1   	        div     %ecx                    # perform the division
 175 00ef 6689168F 	        mov     %edx, mm                # save remainder as mm
 175      00
 176              	
 177              	        # calculate  hh = ((total_seconds / 60) / 60) % 12
 178 00f4 66B90C00 	        mov     $HOURS_PER_HDAY, %ecx   # setup the divisor
 178      0000
 179 00fa 6631D2   	        xor     %edx, %edx              # extend the dividend
 180 00fd 66F7F1   	        div     %ecx                    # perform the division
 181 0100 6689168B 	        mov     %edx, hh                # save remainder as hh
 181      00
 182              	
 183              	        # calculate  xm = (((total_seconds / 60) / 60) / 12) % 2
 184 0105 66B90200 	        mov     $HDAYS_PER_DAY, %ecx    # setup the divisor
 184      0000
 185 010b 6631D2   	        xor     %edx, %edx              # extend the dividend
 186 010e 66F7F1   	        div     %ecx                    # perform the division
 187 0111 66891697 	        mov     %edx, xm                # save remainder as xm
 187      00
 188              	        
 189 0116 C3       	        ret
 190              	#------------------------------------------------------------------
 191              	format_report_of_time:
 192              	#
 193              	# This procedure converts time-parameters into character-strings.
 194              	#
 195              	        # format 'hh'
 196 0117 66A18B00 	        mov     hh, %eax                # get the current hour 
 197 011b 8D3E3200 	        lea     report+3, %di           # point to 'hh' fields
 198 011f E83BFF   	        call    int2str                 # convert int to string
 199              	
 200              	        # format 'mm'
 201 0122 66A18F00 	        mov     mm, %eax                # get the current minute
 202 0126 8D3E3500 	        lea     report+6, %di           # point to 'mm' field
 203 012a E830FF   	        call    int2str                 # convert int to string
 204              	
 205              	        # format 'ss'
 206 012d 66A19300 	        mov     ss, %eax                # get the current second
 207 0131 8D3E3800 	        lea     report+9, %di           # point to 'ss' field
 208 0135 E825FF   	        call    int2str                 # convert int to string
 209              	
 210              	        # format 'xm'
 211 0138 66A19700 	        mov     xm, %eax                # get the current halfday
 212 013c 8D3E3B00 	        lea     report+12, %di          # point to 'xm' field
 213 0140 678A907D 	        mov     a_or_p(%eax), %dl       # lookup 'a' or 'm'
 213      000000
 214 0147 8815     	        mov     %dl, (%di)              # store in message-string
 215              	
 216 0149 C3       	        ret                             # return to the caller
 217              	#------------------------------------------------------------------
 218 014a 89F68DBD 	        .align  16                      # insure stack alignment
 218      0000
 219 0150 00000000 	        .space  512                     # reserved for stack use
 219      00000000 
 219      00000000 
 219      00000000 
 219      00000000 
 220              	tos:                                    # label for top-of-stack
 221              	#------------------------------------------------------------------
 222              	        .end                            # no more to be assembled
DEFINED SYMBOLS
          timeoday.s:25     *ABS*:00000000001234de PULSES_PER_SEC
          timeoday.s:26     *ABS*:0000000000010000 PULSES_PER_TICK
          timeoday.s:28     *ABS*:000000000000003c SECS_PER_MIN
          timeoday.s:29     *ABS*:000000000000003c MINS_PER_HOUR
          timeoday.s:30     *ABS*:000000000000000c HOURS_PER_HDAY
          timeoday.s:31     *ABS*:0000000000000002 HDAYS_PER_DAY
          timeoday.s:38     .text:0000000000000002 main
          timeoday.s:56     .text:000000000000002b ipltos
          timeoday.s:220    .text:0000000000000350 tos
          timeoday.s:117    .text:000000000000009b compute_total_seconds
          timeoday.s:154    .text:00000000000000ce calculate_time_params
          timeoday.s:191    .text:0000000000000117 format_report_of_time
          timeoday.s:63     .text:0000000000000043 print_the_time_of_day
          timeoday.s:59     .text:000000000000002f report
          timeoday.s:60     .text:0000000000000040 length
          timeoday.s:61     .text:0000000000000042 colors
          timeoday.s:81     .text:000000000000005d int2str
          timeoday.s:103    .text:000000000000007c inval
          timeoday.s:94     .text:000000000000006a nxdiv
          timeoday.s:106    .text:000000000000007f ten
          timeoday.s:105    .text:000000000000007d a_or_p
          timeoday.s:107    .text:0000000000000083 total_ticks
          timeoday.s:108    .text:0000000000000087 total_seconds
          timeoday.s:109    .text:000000000000008b hh
          timeoday.s:110    .text:000000000000008f mm
          timeoday.s:111    .text:0000000000000093 ss
          timeoday.s:112    .text:0000000000000097 xm

NO UNDEFINED SYMBOLS
